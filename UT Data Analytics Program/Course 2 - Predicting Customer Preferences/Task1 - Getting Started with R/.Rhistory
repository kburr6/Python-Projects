library(readr)
install.packages("json64")
install.packages("jsonify")
install.packages("jSonarR")
install.packages("jsonld")
install.packages("jsonvalidate")
cars <- read.csv(cars.csv)
library(readr)
cars <- read.csv("cars.csv")
View(cars)
cars <- read.csv("cars.csv")
attributes(cars)
summary(cars)
str(cars)
cars$ColumnName #Will print out the instances within that particular column in your data set.
cars$ColumnName #Will print out the instances within that particular column in your data set.
library(readr)
cars <- read.csv("cars.csv")
attributes(cars)#List your attributes within your data set.
summary(cars) #Prints the min, max, mean, median, and quartiles of each attribute.
str(cars) #Displays the structure of your data set.
names(cars) #Names your attributes within your data set.
cars$ColumnName #Will print out the instances within that particular column in your data set.
cars$name.of.car #Will print out the instances within that particular column in your data set.
hist(cars$speed.of.car)
plot(cars$name.of.car,cars$distance.of.car)
plot(cars$speed.of.car,cars$distance.of.car)
plot(cars$name.of.car,cars$distance.of.car)#bar plot when both numeric
qqnorm(cars$name.of.car)
qqnorm(cars$speed.of.car)
summary(DatasetName) #Will count how many NA’s you have.
is.na(DatasetName) #Will show your NA’s through logical data. (TRUE if it’s missing
summary(cars) #Will count how many NA’s you have.
is.na(cars) #Will show your NA’s through logical data. (TRUE if it’s missing, FALSE if it’s not.)
# DatasetName$ColumnName<-as.typeofdata(DatasetName$ColumnName) -- retypes a column's data
# names(DatasetName)<-c("ColumnName","ColumnName","ColumnName") --renames columns in order
summary(cars) #Will count how many NA’s you have.
is.na(cars) #Will show your NA’s through logical data. (TRUE if it’s missing, FALSE if it’s not.)
# na.omit(DatasetName$ColumnName#Drops any rows with missing values and omits them forever.
# na.exclude(DatasetName$ColumnName)#Drops any rows with missing values, but keeps track of where they were.
set.seed(123) # common seed value is 123 in order to reproduce random results
# to calculate the size of the training and test data sets from the input data set
trainSize<-round(nrow(cars)*0.7)
testSize<-nrow(cars)-trainSize
training_indices<-sample(seq_len(nrow(cars)),size =trainSize)
trainSet<-cars[training_indices,]
trainSet<-cars[training_indices,]
View(trainSet)
testSet<-DatasetName[-training_indices,]
cars
testSet<-cars[-training_indices,]
testSet
duplicated(cars$name.of.car)
unique(cars$name.of.car)
show(cars$name.of.car)
summary( unique(cars$name.of.car))
summary(cars$name.of.car)
lm_PredictDistance<-lm(distance~ speed, trainSet)
summary(lm_PredictDistance)
lm_PredictDistance<-lm(distance.of.car~ speed.of.car, trainSet)
summary(lm_PredictDistance)
DistancePredictions <- predict(lm_PredictDistance,testSet)
DistancePredictions
library(“readr”)
install.packages(readr)
install.packages(readr)
install.packages("readr") #added "" around readr
library(“readr”)
library(readr)
install.packages("installr")
library(installr)
updateR()
rgui
updateR()
install.packages(readr)
install.packages("readr") #added "" around readr
library(readr)
IrisDataset <- read.csv("iris.csv") #added "" around filename
IrisDataset <- read.csv("iris.csv") #added "" around filename
attributes(IrisDataset)
summary(IrisDataset) # added I to risDataset mispelling
str(IrisDatasets)
str(IrisDataset) #removed s at end of IrisDataset
names(IrisDataset)
hist(IrisDataset$Species)
IrisDataset$Species<-as.factor(IrisDataset$Species)
hist(IrisDataset$Species)
IrisDataset$Species<-as.numeric(IrisDataset$Species)
hist(IrisDataset$Species)
NumericSpecies<-as.numeric(IrisDataset$Species) #have to convert Species which is factor to numeric to utilize hist
hist(NumericSpecies)
h <- hist(NumericSpecies)
text(h$mids,h$counts,labels=h$counts, adj=c(0.5, -0.5))
text(h$mids,h$counts,labels=h$Species, adj=c(0.5, -0.5))
text(labels=h$Species)
text(labels=h$Species)
text(h$mids,h$counts,labels=h$Species)
h <- hist(NumericSpecies)
text(h$mids,labels=h$Species)
text(h$mids,labels=h$Species)
hist(NumericSpecies)
NumericSpecies<-as.numeric(IrisDataset$Species) #have to convert Species which is factor to numeric to utilize hist
NumericSpecies<-as.numeric(IrisDataset$Species) #have to convert Species which is factor to numeric to utilize hist
hist(NumericSpecies)
hist(NumericSpecies,labels = TRUE)
hist(NumericSpecies)
plot(IrisDataset$Sepal.Length)
qqnorm(IrisDataset)
qqnorm(IrisDataset$Sepal.Length)
IrisDataset$Species<- as.numeric(IrisDataset$Species)
set.seed(123)
trainSize <- round(nrow(IrisDataset) * 0.7) #change % to .7 for training data set size
testSize <- nrow(IrisDataset) - trainSize
testSize <- nrow(IrisDataset) - trainSize #change trainSet to trainsize to calculate test data set size
trainSize # delete s misspelling
testSize #ok
training_indices<-sample(seq_len(nrow(IrisDataset)),size =trainSize) #need to define the training set indices
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
set.seed(405) # don't need this line otherwise need to rerun above steps with new seed value of 405
testSet
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
testSet
LinearModel<- lm(trainSet$Petal.Length ~ testingSet$Petal.Width, trainSet) #Label is Length predicted by Width on trainSet
LinearModel<- lm(trainSet$Petal.Length ~ trainSet$Petal.Width, trainSet) #Label is Length predicted by Width on trainSet
summary(LinearModel)
prediction<-predict(LinearModel,testSet)#added comma in predict argument list
predictions
prediction
testSize
testSet
prediction<-predict(LinearModel,testSet)#added comma in predict argument list
a <- trainSet$Petal.Length
x <- trainSet$Petal.Width
LinearModel<- lm(a ~ x, trainSet) #Label is Length predicted by Width on trainSet
summary(LinearModel) #ok
prediction<-predict(LinearModel,testSet)#added comma in predict argument list
View(LinearModel)
LinearModel<- lm(Length ~ Width, trainSet) #Label is Length predicted by Width on trainSet
attributes(IrisDataset)
LinearModel<- lm(Petal.Length~ Petal.Width, trainSet) #Label is Length predicted by Width on trainSet
summary(LinearModel) #ok
prediction<-predict(LinearModel,testSet)#added comma in predict argument list
prediction
show(prediction)
d = data.frame(testSet, predict(fit, interval="prediction"))
d = data.frame(testSet, predict(LinearModel, interval="prediction"))
d = data.frame(testSet, predict(LinearModel, interval="prediction"))
d = data.frame(testSet, predict(LinearModel, testSet, interval="prediction"))
d
#d = data.frame(testSet, predict(LinearModel, testSet, interval="prediction"))
prediction<-predict(LinearModel,testSet)#added comma in predict argument list
prediction
d = data.frame(testSet, predict(LinearModel, testSet, interval="prediction")) #put the prediction in a dataframe so can output easier
prediction
d
write.csv(df, 'predictions.csv')
write.csv(d, 'predictions.csv')
df <- d[ -c(1) ]
df
df <- d[ -c(1,2) ]
df
write.csv(df, 'predictions.csv')
df <- d[ -c(1) ]
df
df <- d[ -c(1) ]
df
df <- d[ -c('X', 1) ]
df <- d[ -c(1) ]
df
# data loading steps
library(readr)
cars <- read.csv("cars.csv")
# analysis and prep of data steps
attributes(cars)#List your attributes within your data set.
summary(cars) #Prints the min, max, mean, median, and quartiles of each attribute.
str(cars) #Displays the structure of your data set.
names(cars) #Names your attributes within your data set.
cars$name.of.car #Will print out the instances within that particular column in your data set.
hist(cars$speed.of.car)
plot(cars$speed.of.car,cars$distance.of.car)#scatter plot when both numeric
plot(cars$name.of.car,cars$distance.of.car)#bar plot when both numeric
qqnorm(cars$speed.of.car)# to show whether or not the data is normally distributed
# DatasetName$ColumnName<-as.typeofdata(DatasetName$ColumnName) -- retypes a column's data
# names(DatasetName)<-c("ColumnName","ColumnName","ColumnName") --renames columns in order
summary(cars) #Will count how many NA’s you have.
is.na(cars) #Will show your NA’s through logical data. (TRUE if it’s missing, FALSE if it’s not.)
# na.omit(DatasetName$ColumnName#Drops any rows with missing values and omits them forever.
# na.exclude(DatasetName$ColumnName)#Drops any rows with missing values, but keeps track of where they were.
# replace na with mean DatasetName$ColumnName[is.na(DatasetName$ColumnName)]<-mean(DatasetName$ColumnName,na.rm = TRUE)
# ----------------------------------------------------------------
# training and testing steps
set.seed(123) # common seed value is 123 in order to reproduce random results
# to calculate the size of the training and test data sets from the input data set
trainSize<-round(nrow(cars)*0.7)
testSize<-nrow(cars)-trainSize
#to actually create the training and test data sets
training_indices<-sample(seq_len(nrow(cars)),size =trainSize)
trainSet<-cars[training_indices,]
testSet<-cars[-training_indices,]
# to create the linear regression model to predict distance based on speed from the cars dataset
lm_PredictDistance<-lm(distance.of.car~ speed.of.car, trainSet)
summary(lm_PredictDistance)
DistancePredictions <- predict(lm_PredictDistance,testSet)
DistancePredictions
d = data.frame(testSet, predict(lm_PredictDistance, testSet, interval="prediction"))
d
d <- d[ -c(5:6) ]
d
write.csv(d, file = "carsPredictions.csv")
install.packages("readr") #added "" around readr
library(readr) #removed "" around readr
IrisDataset <- read.csv("iris.csv") #added "" around filename
attributes(IrisDataset) #ok
summary(IrisDataset) # added I to risDataset mispelling
str(IrisDataset) #removed s at end of IrisDataset
names(IrisDataset)#ok
NumericSpecies<-as.numeric(IrisDataset$Species) #have to convert Species which is factor to numeric to utilize hist
hist(NumericSpecies)
plot(IrisDataset$Sepal.Length) #added closing )
qqnorm(IrisDataset$Sepal.Length) #can't use the whole dataset - have to plat one feature
IrisDataset$Species<- as.numeric(IrisDataset$Species) #ok
set.seed(123)#ok
trainSize <- round(nrow(IrisDataset) * 0.7) #change % to .7 for training data set size
testSize <- nrow(IrisDataset) - trainSize #change trainSet to trainsize to calculate test data set size
trainSize # delete s misspelling
testSize #ok
training_indices<-sample(seq_len(nrow(IrisDataset)),size =trainSize) #need to define the training set indices
trainSet <- IrisDataset[training_indices, ] #ok
testSet <- IrisDataset[-training_indices, ] #ok
set.seed(405) # ok - no real reason to do this here though
trainSet <- IrisDataset[training_indices, ] #ok
testSet <- IrisDataset[-training_indices, ] #ok
LinearModel<- lm(Petal.Length~ Petal.Width, trainSet) #Label is Length predicted by Width on trainSet, also don't use dataset name IrisDataset$Petal.Width
summary(LinearModel) #ok
d = data.frame(testSet, predict(LinearModel, testSet, interval="prediction")) #put the prediction in a dataframe so can output easier
#prediction<-predict(LinearModel,testSet)#added comma in predict argument list
df <- d[ -c(1) ]
df
write.csv(df, 'predictions.csv')
install.packages("readr")
install.packages("readr") #added "" around readr
library(readr) #removed "" around readr
IrisDataset <- read.csv("iris.csv") #added "" around filename
attributes(IrisDataset) #ok
summary(IrisDataset) # added I to risDataset mispelling
str(IrisDataset) #removed s at end of IrisDataset
names(IrisDataset)#ok
NumericSpecies<-as.numeric(IrisDataset$Species) #have to convert Species which is factor to numeric to utilize hist
hist(NumericSpecies)
plot(IrisDataset$Sepal.Length) #added closing )
qqnorm(IrisDataset$Sepal.Length) #can't use the whole dataset - have to plat one feature
IrisDataset$Species<- as.numeric(IrisDataset$Species) #ok
set.seed(123)#ok
trainSize <- round(nrow(IrisDataset) * 0.7) #change % to .7 for training data set size
testSize <- nrow(IrisDataset) - trainSize #change trainSet to trainsize to calculate test data set size
trainSize # delete s misspelling
testSize #ok
training_indices<-sample(seq_len(nrow(IrisDataset)),size =trainSize) #need to define the training set indices
trainSet <- IrisDataset[training_indices, ] #ok
testSet <- IrisDataset[-training_indices, ] #ok
set.seed(405) # ok - no real reason to do this here though
trainSet <- IrisDataset[training_indices, ] #ok
testSet <- IrisDataset[-training_indices, ] #ok
LinearModel<- lm(Petal.Length~ Petal.Width, trainSet) #Label is Length predicted by Width on trainSet, also don't use dataset name IrisDataset$Petal.Width
summary(LinearModel) #ok
d = data.frame(testSet, predict(LinearModel, testSet, interval="prediction")) #put the prediction in a dataframe so can output easier
#prediction<-predict(LinearModel,testSet)#added comma in predict argument list
df <- d[ -c(1) ]
df
write.csv(df, 'predictions.csv')
write.csv(df, 'predictions.csv')
