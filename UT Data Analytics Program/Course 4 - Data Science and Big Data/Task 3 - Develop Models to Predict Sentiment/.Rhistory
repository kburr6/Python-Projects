hoverinfo = 'text',
text = ~paste( values),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
showlegend = F) %>%
layout(title = 'iPhone Sentiment',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
# create pie chart
totals<-plot_ly(pieData, labels = ~COM, values = ~ values, type = "pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste( values),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
showlegend = F) %>%
layout(title = 'iPhone Sentiment',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
totals
# create pie chart
totals<-plot_ly(pieData, labels = ~COM, values = ~ values, type = "pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste( values),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
showlegend = F) %>%
layout(title = 'galaxy Sentiment',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
totals
galaxydfoob <- read.csv("galaxy_smallmatrix_labeled_9d.csv", stringsAsFactors = FALSE)
class(galaxydfoob)  # "data.frame"
str(galaxydfoob)   #19937 obs. of  529 variables - all integers
summary(galaxydfoob)
names(galaxydfoob)
head(galaxydfoob)
tail(galaxydfoob)   #no anomoly for head or tail
plot_ly(galaxydfoob, x= ~galaxydfoob$galaxysentiment, type='histogram')
install.packages(c("benchr", "bridgesampling", "brms", "broom", "cli", "dendextend", "effectsize", "FactoMineR", "fftw", "forcats", "gpclib", "gplots", "gridGraphics", "h2o", "manipulateWidget", "mlrMBO", "mvtnorm", "nloptr", "plm", "praznik", "quanteda", "rlang", "RWiener", "sp", "spatstat", "tinytex"))
install.packages(c("benchr", "bridgesampling", "brms", "broom", "cli", "dendextend", "effectsize", "FactoMineR", "fftw", "forcats", "gpclib", "gplots", "gridGraphics", "h2o", "manipulateWidget", "mlrMBO", "mvtnorm", "nloptr", "plm", "praznik", "quanteda", "rlang", "RWiener", "sp", "spatstat", "tinytex"))
install.packages(c("benchr", "bridgesampling", "brms", "broom", "cli", "dendextend", "effectsize", "FactoMineR", "fftw", "forcats", "gpclib", "gplots", "gridGraphics", "h2o", "manipulateWidget", "mlrMBO", "mvtnorm", "nloptr", "plm", "praznik", "quanteda", "rlang", "RWiener", "sp", "spatstat", "tinytex"))
install.packages(c("benchr", "bridgesampling", "brms", "broom", "cli", "dendextend", "effectsize", "FactoMineR", "fftw", "forcats", "gpclib", "gplots", "gridGraphics", "h2o", "manipulateWidget", "mlrMBO", "mvtnorm", "nloptr", "plm", "praznik", "quanteda", "rlang", "RWiener", "sp", "spatstat", "tinytex"))
install.packages(c("benchr", "bridgesampling", "brms", "broom", "cli", "dendextend", "effectsize", "FactoMineR", "fftw", "forcats", "gpclib", "gplots", "gridGraphics", "h2o", "manipulateWidget", "mlrMBO", "mvtnorm", "nloptr", "plm", "praznik", "quanteda", "rlang", "RWiener", "sp", "spatstat", "tinytex"))
install.packages(c("benchr", "bridgesampling", "brms", "broom", "cli", "dendextend", "effectsize", "FactoMineR", "fftw", "forcats", "gpclib", "gplots", "gridGraphics", "h2o", "manipulateWidget", "mlrMBO", "mvtnorm", "nloptr", "plm", "praznik", "quanteda", "rlang", "RWiener", "sp", "spatstat", "tinytex"))
plotData <- c(0.767,  0.5353, 0.7319, 0.4877, 0.768, 0.5324, 0.6975, 0.3643) #rfA, rfK, kknnA, kknnK, c50A, c50K, svmA, svmK
data <- structure(list(W= c(0.767,  0.5353), X = c(0.7319, 0.4877),
Y = c( 0.768, 0.5324), Z = c(0.6975, 0.3643)), .Names = c("RF", "KKNN", "C5.0", "SVM"),  class = "data.frame", row.names = c(NA, -2L))
attach(data)
print(data)
colours <- c("green", "yellow")
bp <- barplot(as.matrix(data), main="Performance Metrics \n Green = Accuracy, Blue = Kappa", ylab = "Values", ylim = c(0.0, 1.0), cex.lab = 1.0, cex.main = 1.0, beside=TRUE, col=c("lightblue", "lavender"))
x <- c('RF', 'KKNN', 'C5.0', 'SVM')
y <- c(0.767, 0.7319, 0.768,0.6975)
y2 <- c(0.5353,0.4877,0.5324,0.3643)
data <- data.frame(x, y, y2)
p <- data %>%
plot_ly() %>%
add_trace(x = ~x, y = ~y, name = "Accuracy", type = 'bar',
text = y, textposition = 'auto',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)', width = 1.5))) %>%
add_trace(x = ~x, y = ~y2, name = "Kappa", type = 'bar',
text = y2, textposition = 'auto',
marker = list(color = 'rgb(58,200,225)',
line = list(color = 'rgb(8,48,107)', width = 1.5))) %>%
layout(title = "Performance Metrics",
barmode = 'group',
xaxis = list(title = ""),
yaxis = list(title = ""))
p
attach(data)
print(data)
colours <- c("green", "yellow")
bp <- barplot(as.matrix(data), main="Performance Metrics \n Green = Accuracy, Blue = Kappa", ylab = "Values", ylim = c(0.0, 1.0), cex.lab = 1.0, cex.main = 1.0, beside=TRUE, col=c("lightblue", "lavender"))
x <- c('RF', 'KKNN', 'C5.0', 'SVM')
y <- c(0.767, 0.7319, 0.768,0.6975)
y2 <- c(0.5353,0.4877,0.5324,0.3643)
data <- data.frame(x, y, y2)
p <- data %>%
plot_ly() %>%
add_trace(x = ~x, y = ~y, name = "Accuracy", type = 'bar',
text = y, textposition = 'auto',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)', width = 1.5))) %>%
add_trace(x = ~x, y = ~y2, name = "Kappa", type = 'bar',
text = y2, textposition = 'auto',
marker = list(color = 'rgb(58,200,225)',
line = list(color = 'rgb(8,48,107)', width = 1.5))) %>%
layout(title = "Performance Metrics",
barmode = 'group',
xaxis = list(title = ""),
yaxis = list(title = ""))
p
plotData <- c(0.767,  0.5353, 0.7319, 0.4877, 0.768, 0.5324, 0.6975, 0.3643) #rfA, rfK, kknnA, kknnK, c50A, c50K, svmA, svmK
data <- structure(list(W= c(0.767,  0.5353), X = c(0.7319, 0.4877),
Y = c( 0.768, 0.5324), Z = c(0.6975, 0.3643)), .Names = c("RF", "KKNN", "C5.0", "SVM"),  class = "data.frame", row.names = c(NA, -2L))
attach(data)
print(data)
colours <- c("green", "yellow")
bp <- barplot(as.matrix(data), main="Performance Metrics \n Green = Accuracy, Blue = Kappa", ylab = "Values", ylim = c(0.0, 1.0), cex.lab = 1.0, cex.main = 1.0, beside=TRUE, col=c("lightblue", "lavender"))
x <- c('RF', 'KKNN', 'C5.0', 'SVM')
y <- c(0.767, 0.7319, 0.768,0.6975)
y2 <- c(0.5353,0.4877,0.5324,0.3643)
data <- data.frame(x, y, y2)
p <- data %>%
plot_ly() %>%
add_trace(x = ~x, y = ~y, name = "Accuracy", type = 'bar',
text = y, textposition = 'auto',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)', width = 1.5))) %>%
add_trace(x = ~x, y = ~y2, name = "Kappa", type = 'bar',
text = y2, textposition = 'auto',
marker = list(color = 'rgb(58,200,225)',
line = list(color = 'rgb(8,48,107)', width = 1.5))) %>%
layout(title = "Performance Metrics",
barmode = 'group',
xaxis = list(title = ""),
yaxis = list(title = ""))
p
seed <- 123
################
# Load packages
################
if(!require(caret)){
install.packages("caret")
library(caret)
}
if(!require(corrplot)){
install.packages("corrplot")
library(corrplot)
}
if(!require(readr)){
install.packages("readr")
library(readr)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(tidyr)){
install.packages("tidyr")
library(tidyr)
}
if(!require(beepr)){
install.packages("beepr")
library(beepr)
}
if(!require(kknn)){
install.packages("kknn")
library(kknn)
}
if(!require(e1071)){
install.packages("e1071")
library(e1071)
}
#####################
# Parallel processing
#####################
#--- for WIN ---#
if(!require(doParallel)){
install.packages("doParallel")
library(doParellel)
}
if(!require(plotly)) {
install.packages("plotly")
library(plotly)
}
#parallel processor allocation for performance improvement
detectCores()  # detect number of cores
cl <- makeCluster(5)  # select number of cores; 2 in this example
registerDoParallel(cl) # register cluster
getDoParWorkers()
plotData <- c(0.767,  0.5353, 0.7319, 0.4877, 0.768, 0.5324, 0.6975, 0.3643) #rfA, rfK, kknnA, kknnK, c50A, c50K, svmA, svmK
data <- structure(list(W= c(0.767,  0.5353), X = c(0.7319, 0.4877),
Y = c( 0.768, 0.5324), Z = c(0.6975, 0.3643)), .Names = c("RF", "KKNN", "C5.0", "SVM"),  class = "data.frame", row.names = c(NA, -2L))
attach(data)
print(data)
colours <- c("green", "yellow")
bp <- barplot(as.matrix(data), main="Performance Metrics \n Green = Accuracy, Blue = Kappa", ylab = "Values", ylim = c(0.0, 1.0), cex.lab = 1.0, cex.main = 1.0, beside=TRUE, col=c("lightblue", "lavender"))
x <- c('RF', 'KKNN', 'C5.0', 'SVM')
y <- c(0.767, 0.7319, 0.768,0.6975)
y2 <- c(0.5353,0.4877,0.5324,0.3643)
data <- data.frame(x, y, y2)
p <- data %>%
plot_ly() %>%
add_trace(x = ~x, y = ~y, name = "Accuracy", type = 'bar',
text = y, textposition = 'auto',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)', width = 1.5))) %>%
add_trace(x = ~x, y = ~y2, name = "Kappa", type = 'bar',
text = y2, textposition = 'auto',
marker = list(color = 'rgb(58,200,225)',
line = list(color = 'rgb(8,48,107)', width = 1.5))) %>%
layout(title = "Performance Metrics",
barmode = 'group',
xaxis = list(title = ""),
yaxis = list(title = ""))
p
plotData <- c(0.767,  0.5353, 0.7319, 0.4877, 0.768, 0.5324, 0.6975, 0.3643) #rfA, rfK, kknnA, kknnK, c50A, c50K, svmA, svmK
data <- structure(list(W= c(0.767,  0.5353), X = c(0.7319, 0.4877),
Y = c(0.768, 0.5324), Z = c(0.6975, 0.3643)), .Names = c("RF", "KKNN", "C5.0", "SVM"),  class = "data.frame", row.names = c(NA, -2L))
attach(data)
print(data)
colours <- c("green", "yellow")
bp <- barplot(as.matrix(data), main="Performance Metrics NZV \n Green = Accuracy, Blue = Kappa", ylab = "Values", ylim = c(0.0, 1.0), cex.lab = 1.0, cex.main = 1.0, beside=TRUE, col=c("lightblue", "lavender"))
x <- c('RF', 'KKNN', 'C5.0', 'SVM')
y <- c(0.767, 0.7319, 0.768,0.6975)
y2 <- c(0.5353,0.4877,0.5324,0.3643)
data <- data.frame(x, y, y2)
p <- data %>%
plot_ly() %>%
add_trace(x = ~x, y = ~y, name = "Accuracy", type = 'bar',
text = y, textposition = 'auto',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)', width = 1.5))) %>%
add_trace(x = ~x, y = ~y2, name = "Kappa", type = 'bar',
text = y2, textposition = 'auto',
marker = list(color = 'rgb(58,200,225)',
line = list(color = 'rgb(8,48,107)', width = 1.5))) %>%
layout(title = "Performance Metrics NZV",
barmode = 'group',
xaxis = list(title = ""),
yaxis = list(title = ""))
p
# short cuts to load the data in order to not run the above steps and
#start at the same place as if having done so
#
#Load data sets for modeling
#
#setwd("C:\\Users\\kburr\\Desktop\\UT Data Analytics Program\\Course 4 - Data Science and Big Data\\Task 3 - Develop Models to Predict Sentiment")
#getwd()
galaxyRFEf <- read.csv("galaxyRFEf.csv")
plotData <- c(0.7678,  0.5371, 0.7326, 0.4889, 0.7685, 0.5344, 0.6988, 0.3688) #rfA, rfK, kknnA, kknnK, c50A, c50K, svmA, svmK
data <- structure(list(W= c(0.7678,  0.5371), X = c(0.7326, 0.4889),
Y = c(0.7685, 0.5344), Z = c(0.6988, 0.3688)), .Names = c("RF", "KKNN", "C5.0", "SVM"),  class = "data.frame", row.names = c(NA, -2L))
attach(data)
print(data)
colours <- c("green", "yellow")
bp <- barplot(as.matrix(data), main="Performance Metrics RFE \n Green = Accuracy, Blue = Kappa", ylab = "Values", ylim = c(0.0, 1.0), cex.lab = 1.0, cex.main = 1.0, beside=TRUE, col=c("lightblue", "lavender"))
x <- c('RF', 'KKNN', 'C5.0', 'SVM')
y <- c(0.7678, 0.7326, 0.7685,0.6988)
y2 <- c(0.5371,0.4889,0.5344,0.3688)
data <- data.frame(x, y, y2)
p <- data %>%
plot_ly() %>%
add_trace(x = ~x, y = ~y, name = "Accuracy", type = 'bar',
text = y, textposition = 'auto',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)', width = 1.5))) %>%
add_trace(x = ~x, y = ~y2, name = "Kappa", type = 'bar',
text = y2, textposition = 'auto',
marker = list(color = 'rgb(58,200,225)',
line = list(color = 'rgb(8,48,107)', width = 1.5))) %>%
layout(title = "Performance Metrics RFE",
barmode = 'group',
xaxis = list(title = ""),
yaxis = list(title = ""))
p
# create a data frame for plotting.
# you can add more sentiment levels if needed
# Replace sentiment values
pieData <- data.frame(COM = c("negative", "somewhat negative", "somewhat positive",                        "positive"),
values = c(13178 , 2691  ,1969, 17389 ))
# create pie chart
totals<-plot_ly(pieData, labels = ~COM, values = ~ values, type = "pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste( values),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
showlegend = F) %>%
layout(title = 'galaxy Sentiment',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
totals
plot_ly(galaxydfoob, x= ~galaxydfoob$galaxysentiment, type='histogram')
summary(galaxydfoob)
str(galaxydfoob)   #19937 obs. of  529 variables - all integers
# plot - ANY INTERESTING PLOTS FOR OOB DATA??
y <- c(1696, 382, 450, 1175, 1417, 7791)
plot_ly(galaxydfoob, x= ~galaxydfoob$galaxysentiment, y = ~y type='histogram')
plot_ly(galaxydfoob, x= ~galaxydfoob$galaxysentiment, y = ~galaxydfoob$galaxysentiment type='histogram')
plot_ly(galaxydfoob, x= ~galaxydfoob$galaxysentiment, type='histogram')
# create a data frame for plotting.
# you can add more sentiment levels if needed
# Replace sentiment values
pieData <- data.frame(COM = c("negative", "somewhat negative", "somewhat positive","positive"),
values = c(13178 , 2691  ,1969, 17389 ))
# create pie chart
totals<-plot_ly(pieData, labels = ~COM, values = ~ values, type = "pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste( values),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
showlegend = F) %>%
layout(title = 'galaxy Sentiment',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
totals
totals
iphonedfoob <- read.csv("iphone_smallmatrix_labeled_8d.csv", stringsAsFactors = FALSE)
plot_ly(iphonedfoob, x= ~iphonedfoob$iphonesentiment, type='histogram')
iphonedfoob <- read.csv("iphone_smallmatrix_labeled_8d.csv", stringsAsFactors = FALSE)
iphonedfoob <- read.csv("iphone_smallmatrix_labeled_8d.csv", stringsAsFactors = FALSE)
iphonedfoob <- read.csv(("iphonedfoob.csv", stringsAsFactors = FALSE))
iphonedfoob <- read.csv("iphonedfoob.csv", stringsAsFactors = FALSE)
iphonedfoob <- read.csv("iphone_smallmatrix_labeled_8d.csv", stringsAsFactors = FALSE)
plot_ly(iphonedfoob, x= ~iphonedfoob$iphonesentiment, type='histogram')
plotData <- c(0.7738,  0.5613, 0.3383, 0.1714, 0.7725, 0.5559, 0.7121, 0.4201) #rfA, rfK, kknnA, kknnK, c50A, c50K, svmA, svmK
data <- structure(list(W= c(0.7738, 0.5613), X = c(0.3383, 0.1714),
Y = c(0.7725, 0.5559), Z = c(0.7121, 0.4201)), .Names = c("RF", "KKNN", "C5.0", "SVM"),  class = "data.frame", row.names = c(NA, -2L))
attach(data)
print(data)
colours <- c("green", "yellow")
bp <- barplot(as.matrix(data), main="Performance Metrics \n Green = Accuracy, Blue = Kappa", ylab = "Values", ylim = c(0.0, 1.0), cex.lab = 1.0, cex.main = 1.0, beside=TRUE, col=c("lightblue", "lavender"))
x <- c('RF', 'KKNN', 'C5.0', 'SVM')
y <- c(0.7738, 0.3383, 0.7725,0.7121)
y2 <- c(0.5613,0.1714,0.5559,0.4201)
data <- data.frame(x, y, y2)
p <- data %>%
plot_ly() %>%
add_trace(x = ~x, y = ~y, name = "Accuracy", type = 'bar',
text = y, textposition = 'auto',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)', width = 1.5))) %>%
add_trace(x = ~x, y = ~y2, name = "Kappa", type = 'bar',
text = y2, textposition = 'auto',
marker = list(color = 'rgb(58,200,225)',
line = list(color = 'rgb(8,48,107)', width = 1.5))) %>%
layout(title = "Performance Metrics",
barmode = 'group',
xaxis = list(title = ""),
yaxis = list(title = ""))
p
p <- data %>%
plot_ly() %>%
add_trace(x = ~x, y = ~y, name = "Accuracy", type = 'bar',
text = y, textposition = 'auto',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)', width = 1.5))) %>%
add_trace(x = ~x, y = ~y2, name = "Kappa", type = 'bar',
text = y2, textposition = 'auto',
marker = list(color = 'rgb(58,200,225)',
line = list(color = 'rgb(8,48,107)', width = 1.5))) %>%
layout(title = "Performance Metrics OOB",
barmode = 'group',
xaxis = list(title = ""),
yaxis = list(title = ""))
p
plotData <- c(0.7586,  0.5219, 0.3237, 0.1482, 0.7589, 0.5245, 0.6871, 0.3548) #rfA, rfK, kknnA, kknnK, c50A, c50K, svmA, svmK
data <- structure(list(W= c(0.7586,  0.5219), X = c(0.3237, 0.1482),
Y = c(0.7589, 0.5245), Z = c(0.6871, 0.3548)), .Names = c("RF", "KKNN", "C5.0", "SVM"),  class = "data.frame", row.names = c(NA, -2L))
attach(data)
print(data)
colours <- c("green", "yellow")
bp <- barplot(as.matrix(data), main="Performance Metrics NZV \n Green = Accuracy, Blue = Kappa", ylab = "Values", ylim = c(0.0, 1.0), cex.lab = 1.0, cex.main = 1.0, beside=TRUE, col=c("lightblue", "lavender"))
x <- c('RF', 'KKNN', 'C5.0', 'SVM')
y <- c(0.7586, 0.3237, 0.7589,0.6871)
y2 <- c(0.5219,0.1482,0.5245,0.3548)
data <- data.frame(x, y, y2)
p <- data %>%
plot_ly() %>%
add_trace(x = ~x, y = ~y, name = "Accuracy", type = 'bar',
text = y, textposition = 'auto',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)', width = 1.5))) %>%
add_trace(x = ~x, y = ~y2, name = "Kappa", type = 'bar',
text = y2, textposition = 'auto',
marker = list(color = 'rgb(58,200,225)',
line = list(color = 'rgb(8,48,107)', width = 1.5))) %>%
layout(title = "Performance Metrics NZV",
barmode = 'group',
xaxis = list(title = ""),
yaxis = list(title = ""))
p
plotData <- c(0.7725,  0.5594, 0.3437, 0.1757, 0.7702, 0.5521, 0.7108, 0.4183) #rfA, rfK, kknnA, kknnK, c50A, c50K, svmA, svmK
data <- structure(list(W= c(0.7725,  0.5594), X = c(0.3437, 0.1757),
Y = c(0.7702, 0.5521), Z = c(0.7108, 0.4183)), .Names = c("RF", "KKNN", "C5.0", "SVM"),  class = "data.frame", row.names = c(NA, -2L))
attach(data)
print(data)
colours <- c("green", "yellow")
bp <- barplot(as.matrix(data), main="Performance Metrics RFE \n Green = Accuracy, Blue = Kappa", ylab = "Values", ylim = c(0.0, 1.0), cex.lab = 1.0, cex.main = 1.0, beside=TRUE, col=c("lightblue", "lavender"))
x <- c('RF', 'KKNN', 'C5.0', 'SVM')
y <- c(0.7725, 0.3437, 0.7702,0.7108)
y2 <- c(0.5594,0.1757,0.5521,0.4183)
data <- data.frame(x, y, y2)
p <- data %>%
plot_ly() %>%
add_trace(x = ~x, y = ~y, name = "Accuracy", type = 'bar',
text = y, textposition = 'auto',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)', width = 1.5))) %>%
add_trace(x = ~x, y = ~y2, name = "Kappa", type = 'bar',
text = y2, textposition = 'auto',
marker = list(color = 'rgb(58,200,225)',
line = list(color = 'rgb(8,48,107)', width = 1.5))) %>%
layout(title = "Performance Metrics RFE",
barmode = 'group',
xaxis = list(title = ""),
yaxis = list(title = ""))
p
# create a data frame for plotting.
# you can add more sentiment levels if needed
# Replace sentiment values
pieData <- data.frame(COM = c("negative", "somewhat negative", "somewhat positive",                        "positive"),
values = c(14277 , 2676  ,2732, 15542 ))
# create pie chart
totals<-plot_ly(pieData, labels = ~COM, values = ~ values, type = "pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste( values),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
showlegend = F) %>%
layout(title = 'galaxy Sentiment',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
totals
# create pie chart
totals<-plot_ly(pieData, labels = ~COM, values = ~ values, type = "pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste( values),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
showlegend = F) %>%
layout(title = 'iPhone Sentiment',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
totals
plot_ly(galaxydfoobf, x= ~galaxydfoobf$galaxysentiment, type='histogram')
seed <- 123
################
# Load packages
################
if(!require(caret)){
install.packages("caret")
library(caret)
}
if(!require(corrplot)){
install.packages("corrplot")
library(corrplot)
}
if(!require(readr)){
install.packages("readr")
library(readr)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(tidyr)){
install.packages("tidyr")
library(tidyr)
}
if(!require(beepr)){
install.packages("beepr")
library(beepr)
}
if(!require(kknn)){
install.packages("kknn")
library(kknn)
}
if(!require(e1071)){
install.packages("e1071")
library(e1071)
}
#####################
# Parallel processing
#####################
#--- for WIN ---#
if(!require(doParallel)){
install.packages("doParallel")
library(doParellel)
}
if(!require(plotly)) {
install.packages("plotly")
library(plotly)
}
#parallel processor allocation for performance improvement
detectCores()  # detect number of cores
cl <- makeCluster(5)  # select number of cores; 2 in this example
registerDoParallel(cl) # register cluster
getDoParWorkers()
plot_ly(galaxydfoobf, x= ~galaxydfoobf$galaxysentiment, type='histogram')
# create a new dataset that will be used for recoding sentiment
plot_ly(galaxydfoobf, x= ~galaxydfoobf$galaxysentiment, type='histogram')
galaxydfoobf <- read.csv("LargeMatrix.csv", header = TRUE, sep = ",")
str(galaxydfoobf)
galaxydfoobf$X <- NULL
galaxydfoobf$galaxysentiment <- as.factor(galaxydfoobf$galaxysentiment)
# create a new dataset that will be used for recoding sentiment
plot_ly(galaxydfoobf, x= ~galaxydfoobf$galaxysentiment, type='histogram')
# create a new dataset that will be used for recoding sentiment
summary(galaxydfoobf)
galaxydfoobf <- read.csv("LargeMatrix.csv", header = TRUE, sep = ",")
str(galaxydfoobf)
