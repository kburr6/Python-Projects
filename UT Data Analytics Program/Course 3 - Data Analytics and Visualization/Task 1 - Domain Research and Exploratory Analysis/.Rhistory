summary(energy2006)
str(energy2006)
is.na(energy2006)
any(is.na(energy2006))
any(is.na(energy2010))
energy2007 <- dbGetQuery(con, "SELECT * FROM yr_2007")
energy2008 <- dbGetQuery(con, "SELECT * FROM yr_2008")
energy2009 <- dbGetQuery(con, "SELECT * FROM yr_2009")
energy2010 <- dbGetQuery(con, "SELECT * FROM yr_2010")
str(energy2007)
# 'data.frame':	521669 obs. of  10 variables:
# $ id                   : num  1 2 3 4 5 6 7 8 9 10 ...
# $ Date                 : chr  "2007-01-01" "2007-01-01" "2007-01-01" "2007-01-01" ...
# $ Time                 : chr  "00:00:00" "00:01:00" "00:02:00" "00:03:00" ...
# $ Global_active_power  : num  2.58 2.55 2.55 2.55 2.55 ...
# $ Global_reactive_power: num  0.136 0.1 0.1 0.1 0.1 0.1 0.096 0 0 0 ...
# $ Global_intensity     : num  10.6 10.4 10.4 10.4 10.4 10.4 10.4 10.2 10.2 10.2 ...
# $ Voltage              : num  242 242 242 242 242 ...
# $ Sub_metering_1       : num  0 0 0 0 0 0 0 0 0 0 ...
# $ Sub_metering_2       : num  0 0 0 0 0 0 0 0 0 0 ...
# $ Sub_metering_3       : num  0 0 0 0 0 0 0 0 0 0 ...
## Combine tables into one dataframe using dplyr
# ** Be sure to include 2010
energy <- bind_rows(energy2007, energy2008, energy2009, energy2010)
# Confirm
head(energy)
tail(energy)
class(energy)
# Remove ID
energy$id <- NULL
str(energy)
##################
# Pre-process DS
##################
#------Create a DateTime col by using unite() in tidyr-------------#
# as.Date() is an R method [R - Date Class - as.Date]
# If use as.Date, will lose any time stamp; (time less than a day)
# as.POSIXct will preserve time stamp; [R - Date-Time - POSIX classes]
# as.POSIXct stores both a date and time with an associated time zone.
# Default is tz of your computer.
# Be sure to keep the date format the same (e.g.,"%d/%m/%Y %H:%M:%S")
# combine Date and Time using unite in tidyr
hhpwrDT <- energy %>% unite(DateTime, Date, Time, sep = " ", remove = FALSE)
# Could remove Date and Time by remove = TRUE and could add back using spread()
# convert DateTime to POSIXct
hhpwrDT$DateTime <- as.POSIXct(hhpwrDT$DateTime,
format = "%Y-%m-%d %H:%M:%S",
tz = "Europe/Paris")
str(hhpwrDT)
class(hhpwrDT$DateTime) #[1] "POSIXct" "POSIXt"
tz(hhpwrDT$DateTime) # "Europe/Paris"
# convert Date to as.Date
hhpwrDT$Date <- as.Date(hhpwrDT$Date, "%Y-%m-%d")
str(hhpwrDT)
## Create "year" attribute with lubridate
hhpwrDT$year <- year(hhpwrDT$DateTime)
hhpwrDT$quarter <- quarter(hhpwrDT$DateTime)
hhpwrDT$month <- month(hhpwrDT$DateTime)
hhpwrDT$week <- week(hhpwrDT$DateTime)
hhpwrDT$weekday <- wday(hhpwrDT$DateTime)
hhpwrDT$day <- day(hhpwrDT$DateTime)
hhpwrDT$hour <- hour(hhpwrDT$DateTime)
hhpwrDT$minute <- minute(hhpwrDT$DateTime)
str(hhpwrDT)
##------- Change data types---------##
# Be sure to use as.numeric(as.character()), if needed, or may end up with index value I/O actual
# dataset$feature <- as.numeric(as.character(dataset$feature))
## ------ Evaluate NA values ----------##
# Are there any NAs in df?
any(is.na(hhpwrDT))
# Use summary to identify where NAs are
summary(hhpwrDT)
any(is.na(energy2007))
any(is.na(energy2008))
any(is.na(energy2009))
any(is.na(energy2010))
View(energy2006)
View(energy2006)
View(energy2006)
test <- subset(hhpwrDT, is.na(DateTime))
test
test2 <- test %>% unite(DateTime, Date, Time, sep = " ", remove = FALSE)
test2
test2$DateTime <- as.POSIXct(test2$DateTime,
format = "%Y-%m-%d %H:%M:%S",
tz = "Europe/Paris")
str(hhpwrDT)
class(hhpwrDT$DateTime) #[1] "POSIXct" "POSIXt"
tz(hhpwrDT$DateTime) # "Europe/Paris"
str(test2)
class(test2$DateTime) #[1] "POSIXct" "POSIXt"
tz(test2$DateTime) # "Europe/Paris"
test2
# R-Pipeline-Filtering-TS-Student-2019
# Name: kevin burr
# Last updated: 11/10/2019
###############
# Project notes
###############
# Kathy has asked you to produce an initial report to IOT Analytics'
#clients. Your report should be in the form of a PowerPoint presentation
#that explains the processes that you will follow during the analysis and
#also presents some initial insights of business relevance based on an
#initial look at the data.
#
# Data Set Information:
#
#   This archive contains 2075259 measurements gathered in a house located in Sceaux (7km of Paris, France)
#between December 2006 and November 2010 (47 months).
# Notes:
#   1.(global_active_power*1000/60 - sub_metering_1 - sub_metering_2 - sub_metering_3) represents the active energy consumed every minute (in watt hour) in the household by electrical equipment not measured in sub-meterings 1, 2 and 3.
# 2.The dataset contains some missing values in the measurements (nearly 1,25% of the rows). All calendar timestamps are present in the dataset but for some timestamps, the measurement values are missing: a missing value is represented by the absence of value between two consecutive semi-colon attribute separators. For instance, the dataset shows missing values on April 28, 2007.
#
#
# Attribute Information:
#
#   1.date: Date in format dd/mm/yyyy
# 2.time: time in format hh:mm:ss
# 3.global_active_power: household global minute-averaged active power (in kilowatt)
# 4.global_reactive_power: household global minute-averaged reactive power (in kilowatt)
# 5.voltage: minute-averaged voltage (in volt)
# 6.global_intensity: household global minute-averaged current intensity (in ampere)
# 7.sub_metering_1: energy sub-metering No. 1 (in watt-hour of active energy).
# It corresponds to the kitchen, containing mainly a dishwasher, an oven and a microwave (hot plates are not
# electric but gas powered).
# # 8.sub_metering_2: energy sub-metering No. 2 (in watt-hour of active energy). It corresponds to the
# laundry room, containing a washing-machine, a tumble-drier, a refrigerator and a light.
# # 9.sub_metering_3: energy sub-metering No. 3 (in watt-hour of active energy). It corresponds to
# an electric water-heater and an air-conditioner.
###############
# Housekeeping
###############
# Clear all variables from R
rm(list = ls())
# get working directory
wd <- getwd()
# set working directory
setwd(wd)
dir()
#####################
# Parallel processing
#####################
#--- for WIN ---#
if(!require(doParallel)){
install.packages("doParallel")
library(doParellel)
}
detectCores()  # detect number of cores
cl <- makeCluster(4)  # select number of cores; 2 in this example
registerDoParallel(cl) # register cluster
getDoParWorkers()  # confirm number of cores being used by RStudio
# Stop Cluster. After performing your tasks, make sure to stop your cluster.
#stopCluster(cl)
################################
## Install and load packages
################################
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(tidyr)){
install.packages("tidyr")
library(tidyr)
}
if(!require(lubridate)){
install.packages("lubridate")
library(lubridate)
}
if(!require(forecast)){
install.packages("forecast")
library(forecast)
}
if(!require(TTR)){
install.packages("TTR")
library(TTR)
}
if(!require(RMySQL)){
install.packages("RMySQL")
library(RMySQL)
}
if(!require(plotly)){
install.packages("plotly")
library(plotly)
}
if(!require(readr)){
install.packages("readr")
library(readr)
}
###############
# Load dataset
###############
# Load using sql
## Create a database connection
con = dbConnect(MySQL(), user='deepAnalytics', password='Sqltask1234!',
dbname='dataanalytics2018',
host='data-analytics-2018.cbrosir2cswx.us-east-1.rds.amazonaws.com')
## List the tables contained in the database
dbListTables(con)
## Lists attributes contained in a table
dbListFields(con,'iris')
## Use asterisk to specify all attributes for download
irisALL <- dbGetQuery(con, "SELECT * FROM iris")
colnames(irisALL)
## Use attribute names to specify specific attributes for download
irisSELECT <- dbGetQuery(con, "SELECT SepalLengthCm, SepalWidthCm FROM iris")
colnames(irisSELECT)
## Energy data
dbListFields(con,'yr_2007')
## Exclude 2006 - mostly incomplete
## ** Include 2010 since it's mostly complete even though POA states to exclude
##    all years that are incomplete
energy2006 <- dbGetQuery(con, "SELECT * FROM yr_2006")
energy2007 <- dbGetQuery(con, "SELECT * FROM yr_2007")
energy2008 <- dbGetQuery(con, "SELECT * FROM yr_2008")
energy2009 <- dbGetQuery(con, "SELECT * FROM yr_2009")
str(energy2007)
# 'data.frame':	521669 obs. of  10 variables:
# $ id                   : num  1 2 3 4 5 6 7 8 9 10 ...
# $ Date                 : chr  "2007-01-01" "2007-01-01" "2007-01-01" "2007-01-01" ...
# $ Time                 : chr  "00:00:00" "00:01:00" "00:02:00" "00:03:00" ...
# $ Global_active_power  : num  2.58 2.55 2.55 2.55 2.55 ...
# $ Global_reactive_power: num  0.136 0.1 0.1 0.1 0.1 0.1 0.096 0 0 0 ...
# $ Global_intensity     : num  10.6 10.4 10.4 10.4 10.4 10.4 10.4 10.2 10.2 10.2 ...
# $ Voltage              : num  242 242 242 242 242 ...
# $ Sub_metering_1       : num  0 0 0 0 0 0 0 0 0 0 ...
# $ Sub_metering_2       : num  0 0 0 0 0 0 0 0 0 0 ...
# $ Sub_metering_3       : num  0 0 0 0 0 0 0 0 0 0 ...
## Combine tables into one dataframe using dplyr
# ** Be sure to include 2010
energy <- bind_rows(energy2007, energy2008, energy2009, energy2010)
# Confirm
head(energy)
tail(energy)
class(energy)
# Remove ID
energy$id <- NULL
str(energy)
##################
# Pre-process DS
##################
#------Create a DateTime col by using unite() in tidyr-------------#
# as.Date() is an R method [R - Date Class - as.Date]
# If use as.Date, will lose any time stamp; (time less than a day)
# as.POSIXct will preserve time stamp; [R - Date-Time - POSIX classes]
# as.POSIXct stores both a date and time with an associated time zone.
# Default is tz of your computer.
# Be sure to keep the date format the same (e.g.,"%d/%m/%Y %H:%M:%S")
# combine Date and Time using unite in tidyr
hhpwrDT <- energy %>% unite(DateTime, Date, Time, sep = " ", remove = FALSE)
# Could remove Date and Time by remove = TRUE and could add back using spread()
# convert DateTime to POSIXct
hhpwrDT$DateTime <- as.POSIXct(hhpwrDT$DateTime,
format = "%Y-%m-%d %H:%M:%S",
tz = "Europe/Paris")
str(hhpwrDT)
class(hhpwrDT$DateTime) #[1] "POSIXct" "POSIXt"
tz(hhpwrDT$DateTime) # "Europe/Paris"
# Clear all variables from R
rm(list = ls())
# get working directory
wd <- getwd()
# set working directory
setwd(wd)
dir()
if(!require(doParallel)){
install.packages("doParallel")
library(doParellel)
}
detectCores()  # detect number of cores
cl <- makeCluster(4)  # select number of cores; 2 in this example
registerDoParallel(cl) # register cluster
getDoParWorkers()  # confirm number of cores being used by RStudio
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(tidyr)){
install.packages("tidyr")
library(tidyr)
}
if(!require(lubridate)){
install.packages("lubridate")
library(lubridate)
}
if(!require(forecast)){
install.packages("forecast")
library(forecast)
}
if(!require(TTR)){
install.packages("TTR")
library(TTR)
}
if(!require(RMySQL)){
install.packages("RMySQL")
library(RMySQL)
}
if(!require(plotly)){
install.packages("plotly")
library(plotly)
}
if(!require(readr)){
install.packages("readr")
library(readr)
}
# Load using sql
## Create a database connection
con = dbConnect(MySQL(), user='deepAnalytics', password='Sqltask1234!',
dbname='dataanalytics2018',
host='data-analytics-2018.cbrosir2cswx.us-east-1.rds.amazonaws.com')
## List the tables contained in the database
dbListTables(con)
## Lists attributes contained in a table
dbListFields(con,'iris')
## Use asterisk to specify all attributes for download
irisALL <- dbGetQuery(con, "SELECT * FROM iris")
colnames(irisALL)
## Use attribute names to specify specific attributes for download
irisSELECT <- dbGetQuery(con, "SELECT SepalLengthCm, SepalWidthCm FROM iris")
colnames(irisSELECT)
## Energy data
dbListFields(con,'yr_2007')
## Exclude 2006 - mostly incomplete
## ** Include 2010 since it's mostly complete even though POA states to exclude
##    all years that are incomplete
energy2006 <- dbGetQuery(con, "SELECT * FROM yr_2006")
energy2007 <- dbGetQuery(con, "SELECT * FROM yr_2007")
energy2008 <- dbGetQuery(con, "SELECT * FROM yr_2008")
energy2009 <- dbGetQuery(con, "SELECT * FROM yr_2009")
str(energy2007)
## Combine tables into one dataframe using dplyr
# ** Be sure to include 2010
energy <- bind_rows(energy2007, energy2008, energy2009, energy2010)
energy2007 <- dbGetQuery(con, "SELECT * FROM yr_2007")
energy2008 <- dbGetQuery(con, "SELECT * FROM yr_2008")
energy2009 <- dbGetQuery(con, "SELECT * FROM yr_2009")
energy2009 <- dbGetQuery(con, "SELECT * FROM yr_2010")
energy2009 <- dbGetQuery(con, "SELECT * FROM yr_2009")
# R-Pipeline-Filtering-TS-Student-2019
# Name: kevin burr
# Last updated: 11/10/2019
###############
# Project notes
###############
# Kathy has asked you to produce an initial report to IOT Analytics'
#clients. Your report should be in the form of a PowerPoint presentation
#that explains the processes that you will follow during the analysis and
#also presents some initial insights of business relevance based on an
#initial look at the data.
#
# Data Set Information:
#
#   This archive contains 2075259 measurements gathered in a house located in Sceaux (7km of Paris, France)
#between December 2006 and November 2010 (47 months).
# Notes:
#   1.(global_active_power*1000/60 - sub_metering_1 - sub_metering_2 - sub_metering_3) represents the active energy consumed every minute (in watt hour) in the household by electrical equipment not measured in sub-meterings 1, 2 and 3.
# 2.The dataset contains some missing values in the measurements (nearly 1,25% of the rows). All calendar timestamps are present in the dataset but for some timestamps, the measurement values are missing: a missing value is represented by the absence of value between two consecutive semi-colon attribute separators. For instance, the dataset shows missing values on April 28, 2007.
#
#
# Attribute Information:
#
#   1.date: Date in format dd/mm/yyyy
# 2.time: time in format hh:mm:ss
# 3.global_active_power: household global minute-averaged active power (in kilowatt)
# 4.global_reactive_power: household global minute-averaged reactive power (in kilowatt)
# 5.voltage: minute-averaged voltage (in volt)
# 6.global_intensity: household global minute-averaged current intensity (in ampere)
# 7.sub_metering_1: energy sub-metering No. 1 (in watt-hour of active energy).
# It corresponds to the kitchen, containing mainly a dishwasher, an oven and a microwave (hot plates are not
# electric but gas powered).
# # 8.sub_metering_2: energy sub-metering No. 2 (in watt-hour of active energy). It corresponds to the
# laundry room, containing a washing-machine, a tumble-drier, a refrigerator and a light.
# # 9.sub_metering_3: energy sub-metering No. 3 (in watt-hour of active energy). It corresponds to
# an electric water-heater and an air-conditioner.
###############
# Housekeeping
###############
# Clear all variables from R
rm(list = ls())
# get working directory
wd <- getwd()
# set working directory
setwd(wd)
dir()
#####################
# Parallel processing
#####################
#--- for WIN ---#
if(!require(doParallel)){
install.packages("doParallel")
library(doParellel)
}
detectCores()  # detect number of cores
cl <- makeCluster(4)  # select number of cores; 2 in this example
registerDoParallel(cl) # register cluster
getDoParWorkers()  # confirm number of cores being used by RStudio
# Stop Cluster. After performing your tasks, make sure to stop your cluster.
#stopCluster(cl)
################################
## Install and load packages
################################
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(tidyr)){
install.packages("tidyr")
library(tidyr)
}
if(!require(lubridate)){
install.packages("lubridate")
library(lubridate)
}
if(!require(forecast)){
install.packages("forecast")
library(forecast)
}
if(!require(TTR)){
install.packages("TTR")
library(TTR)
}
if(!require(RMySQL)){
install.packages("RMySQL")
library(RMySQL)
}
if(!require(plotly)){
install.packages("plotly")
library(plotly)
}
if(!require(readr)){
install.packages("readr")
library(readr)
}
###############
# Load dataset
###############
# Load using sql
## Create a database connection
con = dbConnect(MySQL(), user='deepAnalytics', password='Sqltask1234!',
dbname='dataanalytics2018',
host='data-analytics-2018.cbrosir2cswx.us-east-1.rds.amazonaws.com')
## List the tables contained in the database
dbListTables(con)
## Lists attributes contained in a table
dbListFields(con,'iris')
## Use asterisk to specify all attributes for download
irisALL <- dbGetQuery(con, "SELECT * FROM iris")
colnames(irisALL)
## Use attribute names to specify specific attributes for download
irisSELECT <- dbGetQuery(con, "SELECT SepalLengthCm, SepalWidthCm FROM iris")
colnames(irisSELECT)
## Energy data
dbListFields(con,'yr_2007')
## Exclude 2006 - mostly incomplete
## ** Include 2010 since it's mostly complete even though POA states to exclude
##    all years that are incomplete
energy2007 <- dbGetQuery(con, "SELECT * FROM yr_2007")
energy2008 <- dbGetQuery(con, "SELECT * FROM yr_2008")
energy2009 <- dbGetQuery(con, "SELECT * FROM yr_2009")
energy2010 <- dbGetQuery(con, "SELECT * FROM yr_2010")
str(energy2007)
# 'data.frame':	521669 obs. of  10 variables:
# $ id                   : num  1 2 3 4 5 6 7 8 9 10 ...
# $ Date                 : chr  "2007-01-01" "2007-01-01" "2007-01-01" "2007-01-01" ...
# $ Time                 : chr  "00:00:00" "00:01:00" "00:02:00" "00:03:00" ...
# $ Global_active_power  : num  2.58 2.55 2.55 2.55 2.55 ...
# $ Global_reactive_power: num  0.136 0.1 0.1 0.1 0.1 0.1 0.096 0 0 0 ...
# $ Global_intensity     : num  10.6 10.4 10.4 10.4 10.4 10.4 10.4 10.2 10.2 10.2 ...
# $ Voltage              : num  242 242 242 242 242 ...
# $ Sub_metering_1       : num  0 0 0 0 0 0 0 0 0 0 ...
# $ Sub_metering_2       : num  0 0 0 0 0 0 0 0 0 0 ...
# $ Sub_metering_3       : num  0 0 0 0 0 0 0 0 0 0 ...
## Combine tables into one dataframe using dplyr
# ** Be sure to include 2010
energy <- bind_rows(energy2007, energy2008, energy2009, energy2010)
# Confirm
head(energy)
tail(energy)
class(energy)
# Remove ID
energy$id <- NULL
str(energy)
# combine Date and Time using unite in tidyr
hhpwrDT <- energy %>% unite(DateTime, Date, Time, sep = " ", remove = FALSE)
# Could remove Date and Time by remove = TRUE and could add back using spread()
# convert DateTime to POSIXct
hhpwrDT$DateTime <- as.POSIXct(hhpwrDT$DateTime,
format = "%Y-%m-%d %H:%M:%S",
tz = "Europe/Paris")
str(hhpwrDT)
class(hhpwrDT$DateTime) #[1] "POSIXct" "POSIXt"
tz(hhpwrDT$DateTime) # "Europe/Paris"
summary(hhpwrDT)
# convert Date to as.Date
hhpwrDT$Date <- as.Date(hhpwrDT$Date, "%Y-%m-%d")
str(hhpwrDT)
hhpwrDT$year <- year(hhpwrDT$DateTime)
hhpwrDT$quarter <- quarter(hhpwrDT$DateTime)
hhpwrDT$month <- month(hhpwrDT$DateTime)
hhpwrDT$week <- week(hhpwrDT$DateTime)
hhpwrDT$weekday <- wday(hhpwrDT$DateTime)
hhpwrDT$day <- day(hhpwrDT$DateTime)
hhpwrDT$hour <- hour(hhpwrDT$DateTime)
hhpwrDT$minute <- minute(hhpwrDT$DateTime)
str(hhpwrDT)
# Are there any NAs in df?
any(is.na(hhpwrDT))
# Use summary to identify where NAs are
summary(hhpwrDT)
write.csv(hhpwrDT,file = "hhpwrDT_pp.csv")
counts <- D[, .(rowCount = .N), by = id]
hhpwrDT %>% count(year)
install.packages(c("AER", "bookdown", "clusterSim", "data.tree", "DT", "earth", "Ecdat", "fields", "foghorn", "future", "gee", "ggeffects", "glmnet", "haven", "hexbin", "Hmisc", "jsonify", "kernlab", "knitr", "ks", "listviewer", "logspline", "mctest", "miceadds", "openxlsx", "pbv", "pdftools", "pec", "plotly", "prodlim", "quantreg", "R.oo", "R6", "Rcpp", "revdbayes", "riskRegression", "rjags", "rmarkdown", "roxygen2", "rticles", "rvest", "sirt", "sp", "spam", "spam64", "testit", "testthat", "tram", "xfun"))
